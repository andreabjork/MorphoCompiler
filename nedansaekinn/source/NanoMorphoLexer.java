/* The following code was generated by JFlex 1.6.0 */

/**
	JFlex lesgreinir fyrir NanoMorpho.
	Höfundar:	Andrea Björk Björnsdóttir
				Björn Bjarnsteinsson
				Leó Jóhannsson
				Febrúar 2016
				
	Smíðað eftir beinagrind fyrir NanoLisp eftir Snorra Agnarsson

	Þennan lesgreini má þýða með skipununum
		java -jar JFlex.jar nanomorpho.jflex
		javac NanoMorphoLexer.java
	
	Getum líka linkað bin/jflex með
	% 		ln -s /path/to/jflex/bin/ /usr/bin/jflex
	
	og keyrt lesgreininn einfaldlega með
		jflex nanomorpho.jflex
		javac NanoMorphoLexer.java
	
 */

public class NanoMorphoLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\44\1\40\1\42\1\43\1\41\22\0\1\44\1\36\1\5"+
    "\2\0\1\20\1\34\1\14\2\17\1\20\1\4\1\17\1\4\1\2"+
    "\1\20\4\15\4\16\2\1\1\20\1\37\1\20\1\21\2\20\1\0"+
    "\4\22\1\3\25\22\1\0\1\6\1\0\1\20\2\0\1\26\1\7"+
    "\2\22\1\25\1\12\1\22\1\32\1\30\2\22\1\24\1\22\1\11"+
    "\3\22\1\13\1\27\1\10\1\23\1\33\1\31\3\22\1\17\1\35"+
    "\1\17\1\20\6\0\1\42\44\0\1\22\12\0\1\22\4\0\1\22"+
    "\5\0\27\22\1\0\37\22\1\0\u01ca\22\4\0\14\22\16\0\5\22"+
    "\7\0\1\22\1\0\1\22\201\0\5\22\1\0\2\22\2\0\4\22"+
    "\1\0\1\22\6\0\1\22\1\0\3\22\1\0\1\22\1\0\24\22"+
    "\1\0\123\22\1\0\213\22\10\0\246\22\1\0\46\22\2\0\1\22"+
    "\7\0\47\22\110\0\33\22\5\0\3\22\55\0\53\22\43\0\2\22"+
    "\1\0\143\22\1\0\1\22\17\0\2\22\7\0\2\22\12\0\3\22"+
    "\2\0\1\22\20\0\1\22\1\0\36\22\35\0\131\22\13\0\1\22"+
    "\30\0\41\22\11\0\2\22\4\0\1\22\5\0\26\22\4\0\1\22"+
    "\11\0\1\22\3\0\1\22\27\0\31\22\107\0\23\22\121\0\66\22"+
    "\3\0\1\22\22\0\1\22\7\0\12\22\17\0\20\22\4\0\10\22"+
    "\2\0\2\22\2\0\26\22\1\0\7\22\1\0\1\22\3\0\4\22"+
    "\3\0\1\22\20\0\1\22\15\0\2\22\1\0\3\22\16\0\2\22"+
    "\23\0\6\22\4\0\2\22\2\0\26\22\1\0\7\22\1\0\2\22"+
    "\1\0\2\22\1\0\2\22\37\0\4\22\1\0\1\22\23\0\3\22"+
    "\20\0\11\22\1\0\3\22\1\0\26\22\1\0\7\22\1\0\2\22"+
    "\1\0\5\22\3\0\1\22\22\0\1\22\17\0\2\22\43\0\10\22"+
    "\2\0\2\22\2\0\26\22\1\0\7\22\1\0\2\22\1\0\5\22"+
    "\3\0\1\22\36\0\2\22\1\0\3\22\17\0\1\22\21\0\1\22"+
    "\1\0\6\22\3\0\3\22\1\0\4\22\3\0\2\22\1\0\1\22"+
    "\1\0\2\22\3\0\2\22\3\0\3\22\3\0\14\22\26\0\1\22"+
    "\64\0\10\22\1\0\3\22\1\0\27\22\1\0\20\22\3\0\1\22"+
    "\32\0\2\22\6\0\2\22\43\0\10\22\1\0\3\22\1\0\27\22"+
    "\1\0\12\22\1\0\5\22\3\0\1\22\40\0\1\22\1\0\2\22"+
    "\17\0\2\22\22\0\10\22\1\0\3\22\1\0\51\22\2\0\1\22"+
    "\20\0\1\22\21\0\2\22\30\0\6\22\5\0\22\22\3\0\30\22"+
    "\1\0\11\22\1\0\1\22\2\0\7\22\72\0\60\22\1\0\2\22"+
    "\14\0\7\22\72\0\2\22\1\0\1\22\2\0\2\22\1\0\1\22"+
    "\2\0\1\22\6\0\4\22\1\0\7\22\1\0\3\22\1\0\1\22"+
    "\1\0\1\22\2\0\2\22\1\0\4\22\1\0\2\22\11\0\1\22"+
    "\2\0\5\22\1\0\1\22\25\0\4\22\40\0\1\22\77\0\10\22"+
    "\1\0\44\22\33\0\5\22\163\0\53\22\24\0\1\22\20\0\6\22"+
    "\4\0\4\22\3\0\1\22\3\0\2\22\7\0\3\22\4\0\15\22"+
    "\14\0\1\22\21\0\46\22\1\0\1\22\5\0\1\22\2\0\53\22"+
    "\1\0\u014d\22\1\0\4\22\2\0\7\22\1\0\1\22\1\0\4\22"+
    "\2\0\51\22\1\0\4\22\2\0\41\22\1\0\4\22\2\0\7\22"+
    "\1\0\1\22\1\0\4\22\2\0\17\22\1\0\71\22\1\0\4\22"+
    "\2\0\103\22\45\0\20\22\20\0\125\22\14\0\u026c\22\2\0\21\22"+
    "\1\0\32\22\5\0\113\22\6\0\10\22\7\0\15\22\1\0\4\22"+
    "\16\0\22\22\16\0\22\22\16\0\15\22\1\0\3\22\17\0\64\22"+
    "\43\0\1\22\4\0\1\22\103\0\130\22\10\0\51\22\1\0\1\22"+
    "\5\0\106\22\12\0\37\22\61\0\36\22\2\0\5\22\13\0\54\22"+
    "\25\0\7\22\70\0\27\22\11\0\65\22\122\0\1\22\135\0\57\22"+
    "\21\0\7\22\67\0\36\22\15\0\2\22\12\0\54\22\32\0\44\22"+
    "\51\0\3\22\12\0\44\22\153\0\4\22\1\0\4\22\3\0\2\22"+
    "\11\0\300\22\100\0\u0116\22\2\0\6\22\2\0\46\22\2\0\6\22"+
    "\2\0\10\22\1\0\1\22\1\0\1\22\1\0\1\22\1\0\37\22"+
    "\2\0\65\22\1\0\7\22\1\0\1\22\3\0\3\22\1\0\7\22"+
    "\3\0\4\22\2\0\6\22\4\0\15\22\5\0\3\22\1\0\7\22"+
    "\53\0\1\42\1\42\107\0\1\22\15\0\1\22\20\0\15\22\145\0"+
    "\1\22\4\0\1\22\2\0\12\22\1\0\1\22\3\0\5\22\6\0"+
    "\1\22\1\0\1\22\1\0\1\22\1\0\4\22\1\0\13\22\2\0"+
    "\4\22\5\0\5\22\4\0\1\22\64\0\2\22\u0a7b\0\57\22\1\0"+
    "\57\22\1\0\205\22\6\0\4\22\3\0\2\22\14\0\46\22\1\0"+
    "\1\22\5\0\1\22\2\0\70\22\7\0\1\22\20\0\27\22\11\0"+
    "\7\22\1\0\7\22\1\0\7\22\1\0\7\22\1\0\7\22\1\0"+
    "\7\22\1\0\7\22\1\0\7\22\120\0\1\22\u01d5\0\2\22\52\0"+
    "\5\22\5\0\2\22\4\0\126\22\6\0\3\22\1\0\132\22\1\0"+
    "\4\22\5\0\51\22\3\0\136\22\21\0\33\22\65\0\20\22\u0200\0"+
    "\u19b6\22\112\0\u51cd\22\63\0\u048d\22\103\0\56\22\2\0\u010d\22\3\0"+
    "\20\22\12\0\2\22\24\0\57\22\20\0\37\22\2\0\106\22\61\0"+
    "\11\22\2\0\147\22\2\0\4\22\1\0\36\22\2\0\2\22\105\0"+
    "\13\22\1\0\3\22\1\0\4\22\1\0\27\22\35\0\64\22\16\0"+
    "\62\22\76\0\6\22\3\0\1\22\16\0\34\22\12\0\27\22\31\0"+
    "\35\22\7\0\57\22\34\0\1\22\20\0\5\22\1\0\12\22\12\0"+
    "\5\22\1\0\51\22\27\0\3\22\1\0\10\22\24\0\27\22\3\0"+
    "\1\22\3\0\62\22\1\0\1\22\3\0\2\22\2\0\5\22\2\0"+
    "\1\22\1\0\1\22\30\0\3\22\2\0\13\22\7\0\3\22\14\0"+
    "\6\22\2\0\6\22\2\0\6\22\11\0\7\22\1\0\7\22\1\0"+
    "\53\22\1\0\4\22\4\0\2\22\132\0\43\22\35\0\u2ba4\22\14\0"+
    "\27\22\4\0\61\22\u2104\0\u016e\22\2\0\152\22\46\0\7\22\14\0"+
    "\5\22\5\0\1\22\1\0\12\22\1\0\15\22\1\0\5\22\1\0"+
    "\1\22\1\0\2\22\1\0\2\22\1\0\154\22\41\0\u016b\22\22\0"+
    "\100\22\2\0\66\22\50\0\14\22\164\0\5\22\1\0\207\22\44\0"+
    "\32\22\6\0\32\22\13\0\131\22\3\0\6\22\2\0\6\22\2\0"+
    "\6\22\2\0\3\22\43\0\14\22\1\0\32\22\1\0\23\22\1\0"+
    "\2\22\1\0\17\22\2\0\16\22\42\0\173\22\u0185\0\35\22\3\0"+
    "\61\22\57\0\40\22\20\0\21\22\1\0\10\22\6\0\46\22\12\0"+
    "\36\22\2\0\44\22\4\0\10\22\60\0\236\22\142\0\50\22\10\0"+
    "\64\22\234\0\u0137\22\11\0\26\22\12\0\10\22\230\0\6\22\2\0"+
    "\1\22\1\0\54\22\1\0\2\22\3\0\1\22\2\0\27\22\12\0"+
    "\27\22\11\0\37\22\141\0\26\22\12\0\32\22\106\0\70\22\6\0"+
    "\2\22\100\0\1\22\17\0\4\22\1\0\3\22\1\0\33\22\54\0"+
    "\35\22\3\0\35\22\43\0\10\22\1\0\34\22\33\0\66\22\12\0"+
    "\26\22\12\0\23\22\15\0\22\22\156\0\111\22\u03ba\0\65\22\113\0"+
    "\55\22\40\0\31\22\32\0\44\22\51\0\43\22\3\0\1\22\14\0"+
    "\60\22\16\0\4\22\25\0\1\22\45\0\22\22\1\0\31\22\204\0"+
    "\57\22\46\0\10\22\2\0\2\22\2\0\26\22\1\0\7\22\1\0"+
    "\2\22\1\0\5\22\3\0\1\22\37\0\5\22\u011e\0\60\22\24\0"+
    "\2\22\1\0\1\22\270\0\57\22\121\0\60\22\24\0\1\22\73\0"+
    "\53\22\u01f5\0\100\22\37\0\1\22\u01c0\0\71\22\u0507\0\u0399\22\u0c67\0"+
    "\u042f\22\u33d1\0\u0239\22\7\0\37\22\161\0\36\22\22\0\60\22\20\0"+
    "\4\22\37\0\25\22\5\0\23\22\u0370\0\105\22\13\0\1\22\102\0"+
    "\15\22\u4060\0\2\22\u0bfe\0\153\22\5\0\15\22\3\0\11\22\7\0"+
    "\12\22\u1766\0\125\22\1\0\107\22\1\0\2\22\2\0\1\22\2\0"+
    "\2\22\2\0\4\22\1\0\14\22\1\0\1\22\1\0\7\22\1\0"+
    "\101\22\1\0\4\22\2\0\10\22\1\0\7\22\1\0\34\22\1\0"+
    "\4\22\1\0\5\22\1\0\1\22\3\0\7\22\1\0\u0154\22\2\0"+
    "\31\22\1\0\31\22\1\0\37\22\1\0\31\22\1\0\37\22\1\0"+
    "\31\22\1\0\37\22\1\0\31\22\1\0\37\22\1\0\31\22\1\0"+
    "\10\22\u1034\0\305\22\u053b\0\4\22\1\0\33\22\1\0\2\22\1\0"+
    "\1\22\2\0\1\22\1\0\12\22\1\0\4\22\1\0\1\22\1\0"+
    "\1\22\6\0\1\22\4\0\1\22\1\0\1\22\1\0\1\22\1\0"+
    "\3\22\1\0\2\22\1\0\1\22\2\0\1\22\1\0\1\22\1\0"+
    "\1\22\1\0\1\22\1\0\1\22\1\0\2\22\1\0\1\22\2\0"+
    "\4\22\1\0\7\22\1\0\4\22\1\0\4\22\1\0\1\22\1\0"+
    "\12\22\1\0\21\22\5\0\3\22\1\0\5\22\1\0\21\22\u1144\0"+
    "\ua6d7\22\51\0\u1035\22\13\0\336\22\u3fe2\0\u021e\22\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05f0\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\4\3\1\1"+
    "\2\5\4\3\2\1\1\6\1\5\1\7\2\0\1\2"+
    "\1\0\4\3\2\0\1\3\1\10\2\3\1\11\1\12"+
    "\1\0\1\2\4\3\2\0\2\3\1\13\2\14\1\0"+
    "\1\2\1\3\1\15\2\3\1\16\1\2\1\0\1\3"+
    "\1\17\1\20\1\21";

  private static int [] zzUnpackAction() {
    int [] result = new int[64];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\45\0\112\0\157\0\224\0\271\0\336\0\u0103"+
    "\0\u0128\0\u014d\0\u0172\0\45\0\224\0\u0197\0\u01bc\0\u01e1"+
    "\0\u0206\0\u022b\0\u0250\0\45\0\u0275\0\45\0\u029a\0\271"+
    "\0\45\0\u02bf\0\u02e4\0\u0309\0\u032e\0\u0353\0\u0378\0\u039d"+
    "\0\u03c2\0\157\0\u03e7\0\u040c\0\45\0\45\0\u0431\0\u0456"+
    "\0\u047b\0\u04a0\0\u04c5\0\u04ea\0\u050f\0\u0534\0\u0559\0\u057e"+
    "\0\157\0\45\0\u05a3\0\u05c8\0\157\0\u05ed\0\157\0\u0612"+
    "\0\u0637\0\45\0\u065c\0\u065c\0\u0681\0\157\0\157\0\157";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[64];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\1\6\1\2\1\4"+
    "\1\7\1\10\1\11\1\12\1\13\2\3\1\14\1\5"+
    "\1\15\3\4\1\16\2\4\1\17\1\20\1\4\1\21"+
    "\1\22\1\23\1\24\1\25\2\26\1\0\2\26\46\0"+
    "\1\3\1\27\1\4\3\0\5\4\1\0\2\3\3\0"+
    "\12\4\12\0\1\4\1\0\1\4\3\0\5\4\1\0"+
    "\2\4\3\0\12\4\15\0\1\5\13\0\2\5\23\0"+
    "\5\30\1\31\1\32\36\30\1\0\1\4\1\0\1\4"+
    "\3\0\4\4\1\33\1\0\2\4\3\0\12\4\12\0"+
    "\1\4\1\0\1\4\3\0\5\4\1\0\2\4\3\0"+
    "\1\4\1\34\10\4\12\0\1\4\1\0\1\4\3\0"+
    "\5\4\1\0\2\4\3\0\4\4\1\35\5\4\12\0"+
    "\1\4\1\0\1\4\3\0\5\4\1\0\2\4\3\0"+
    "\3\4\1\36\6\4\11\0\6\37\1\40\5\37\1\0"+
    "\30\37\1\0\1\4\1\0\1\4\3\0\5\4\1\0"+
    "\2\4\3\0\2\4\1\41\7\4\12\0\1\4\1\0"+
    "\1\4\3\0\3\4\1\42\1\4\1\0\2\4\3\0"+
    "\12\4\12\0\1\4\1\0\1\4\3\0\5\4\1\0"+
    "\2\4\3\0\10\4\1\43\1\4\12\0\1\4\1\0"+
    "\1\4\3\0\5\4\1\0\2\4\3\0\4\4\1\44"+
    "\5\4\45\0\1\45\45\0\1\46\46\0\1\47\6\0"+
    "\1\50\13\0\2\50\33\0\12\30\27\0\1\4\1\0"+
    "\1\4\3\0\5\4\1\0\2\4\3\0\1\4\1\51"+
    "\10\4\12\0\1\4\1\0\1\4\3\0\5\4\1\0"+
    "\2\4\3\0\2\4\1\52\7\4\12\0\1\4\1\0"+
    "\1\4\3\0\5\4\1\0\2\4\3\0\2\4\1\53"+
    "\7\4\12\0\1\4\1\0\1\4\3\0\1\4\1\54"+
    "\3\4\1\0\2\4\3\0\12\4\25\0\1\31\35\0"+
    "\10\37\1\55\1\56\27\0\1\4\1\0\1\4\3\0"+
    "\5\4\1\0\2\4\3\0\5\4\1\57\4\4\12\0"+
    "\1\4\1\0\1\4\3\0\5\4\1\0\2\4\3\0"+
    "\6\4\1\60\3\4\12\0\1\4\1\0\1\4\3\0"+
    "\4\4\1\61\1\0\2\4\3\0\12\4\11\0\40\47"+
    "\1\62\1\63\2\62\1\47\1\0\1\50\1\0\1\64"+
    "\11\0\2\50\6\0\1\64\20\0\1\4\1\0\1\4"+
    "\3\0\5\4\1\0\2\4\3\0\3\4\1\65\6\4"+
    "\12\0\1\4\1\0\1\4\3\0\5\4\1\0\2\4"+
    "\3\0\2\4\1\65\7\4\12\0\1\4\1\0\1\4"+
    "\3\0\5\4\1\0\2\4\3\0\5\4\1\51\4\4"+
    "\12\0\1\4\1\0\1\4\3\0\5\4\1\0\2\4"+
    "\3\0\1\4\1\66\10\4\25\0\1\31\2\56\42\0"+
    "\1\31\2\37\27\0\1\4\1\0\1\4\3\0\5\4"+
    "\1\0\2\4\3\0\3\4\1\67\2\4\1\70\3\4"+
    "\12\0\1\4\1\0\1\4\3\0\5\4\1\0\2\4"+
    "\3\0\2\4\1\71\7\4\51\0\1\72\5\0\1\73"+
    "\2\0\1\74\10\0\2\73\27\0\1\4\1\0\1\4"+
    "\3\0\4\4\1\75\1\0\2\4\3\0\12\4\12\0"+
    "\1\4\1\0\1\4\3\0\3\4\1\76\1\4\1\0"+
    "\2\4\3\0\12\4\12\0\1\4\1\0\1\4\3\0"+
    "\5\4\1\0\2\4\3\0\3\4\1\77\6\4\12\0"+
    "\1\73\13\0\2\73\27\0\1\4\1\0\1\4\3\0"+
    "\2\4\1\100\2\4\1\0\2\4\3\0\12\4\11\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1702];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\11\1\1\11\7\1\1\11\1\1\1\11"+
    "\2\0\1\11\1\0\4\1\2\0\4\1\2\11\1\0"+
    "\5\1\2\0\3\1\1\11\1\1\1\0\5\1\1\11"+
    "\1\1\1\0\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[64];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

public int getLine() { return yyline; }
public int getColumn() { return yycolumn; }

public NanoMorphoParser yyparser;

public NanoMorphoLexer( java.io.Reader r, NanoMorphoParser yyparser )
{
	this(r);
	this.yyparser = yyparser;
}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public NanoMorphoLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2304) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { return NanoMorphoParser.YYERRCODE;
          }
        case 18: break;
        case 2: 
          { yyparser.yylval = new NanoMorphoParserVal(yytext());
	return NanoMorphoParser.LITERAL;
          }
        case 19: break;
        case 3: 
          { yyparser.yylval = new NanoMorphoParserVal(yytext());
	return NanoMorphoParser.NAME;
          }
        case 20: break;
        case 4: 
          { yyparser.yylval = new NanoMorphoParserVal(yytext());
	return NanoMorphoParser.OPERATOR;
          }
        case 21: break;
        case 5: 
          { yyparser.yylval = new NanoMorphoParserVal(yytext());
	return yycharat(0);
          }
        case 22: break;
        case 6: 
          { return NanoMorphoParser.NOT;
          }
        case 23: break;
        case 7: 
          { 
          }
        case 24: break;
        case 8: 
          { return NanoMorphoParser.IF;
          }
        case 25: break;
        case 9: 
          { return NanoMorphoParser.AND;
          }
        case 26: break;
        case 10: 
          { return NanoMorphoParser.OR;
          }
        case 27: break;
        case 11: 
          { return NanoMorphoParser.VAR;
          }
        case 28: break;
        case 12: 
          // lookahead expression with fixed lookahead length
          zzMarkedPos = Character.offsetByCodePoints
              (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
          { 
          }
        case 29: break;
        case 13: 
          { return NanoMorphoParser.ELSE;
          }
        case 30: break;
        case 14: 
          // lookahead expression with fixed lookahead length
          zzMarkedPos = Character.offsetByCodePoints
              (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -2);
          { 
          }
        case 31: break;
        case 15: 
          { return NanoMorphoParser.ELSIF;
          }
        case 32: break;
        case 16: 
          { return NanoMorphoParser.WHILE;
          }
        case 33: break;
        case 17: 
          { return NanoMorphoParser.RETURN;
          }
        case 34: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return 0; }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
