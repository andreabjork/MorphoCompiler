%{
	import java.io.*;
	import java.util.*;
%}

%right '='
%right RETURN
%left OPERATOR
%token <sval> OPERATOR
%token <sval> LITERAL,NAME /*Ath forgang*/
%token IF,ELSE,ELSIF,WHILE,VAR
%token RETURN,AND,OR,NOT
%type <obj> program
%type <obj> function
%type <obj> body,bodyexprs
%type <obj> exprs, expr, args, nonEmptyArgs
%type <obj> smallexpr, ifexpr, elsebody
%type <ival> ids,decls, decl
%type <sval> fname,op

%%

start
	:	program	{ generateProgram(name,((Vector<Object>)($1)).toArray()); }
	;

program
	:	program function		{ ((Vector<Object>)($1)).add($2); $$=$1; }
	|	function				{ $$=new Vector<Object>(); ((Vector<Object>)($$)).add($1); }
	;

function
	:	{
			varCount = 0;
			varTable = new HashMap<String,Integer>();
		}
		fname '(' ids ')' '{' decls exprs '}'
		{
			// Function intermediate is e = {fname, argcount, varcount, expr0, expr1, ... , exprN}
			Vector<Object> funcIm = new Vector<Object>();
			funcIm.add($2); // Add fname
			funcIm.add($4); // Add ids (number of arguments)
			funcIm.add($7); // Add decls

            Object[] allExprs = ((Object[])($8));
			for(Object[] expr : allExprs) funcIm.add(expr);
			$$=funcIm.toArray();
		}
	;

args
    :	/*empty*/      {$$ = new Vector<Object>();}
	|	nonEmptyArgs   {((Vector<Object>)($$)).add($1);}
	;

nonEmptyArgs
        :	nonEmptyArgs ',' expr  { ((Vector<Object>)($1)).add($3); $$=$1; }
		|	expr    { $$=new Vector<Object>(); ((Vector<Object>)($$)).add($1);}
		;

ids
	:	/*empty*/		{ $$=0; }
	|	ids ',' NAME 		{ addVar($3); $$=$1+1; }
	|	NAME 			{addVar($1); $$=$$+1;}
	;

decls
	: /*empty*/     	{ $$=0;}
	| decls decl ';'    { $$=$1+$2; }
	;

decl
	:	/*empty*/		{ $$ = 0; }
	|	decl ',' NAME		{ addVar($3); $$=$1+1; }
	|	VAR NAME {addVar($2); $$=$$+1;}
	;

exprs
    :   /*empty*/           {$$=new Vector<Object>();}
	|	expr ';' exprs	{ ((Vector<Object>)($3)).add(new Object[]{$1}); $$=$3;}
	;

expr
	:	expr OPERATOR expr 	{ ((Vector<Object>)($1)).add($2); ((Vector<Object>)($1)).add($3); $$=$1;}
	|	smallexpr 			{ $$=new Vector<Object>(); ((Vector<Object>)($$)).add($1);}
	|	NAME '=' expr				{ $$ = new Object[]{CodeType.ASSIGN, findVar($1), ((Vector<Object>)($3)).toArray()};} 		/*{CodeType.ASSIGN, argloc, expr()}*/
	|	RETURN expr				    { $$ = new Object[]{CodeType.RETURN, ((Vector<Object>)($2)).toArray()};} 						/*{CodeType.RETURN, expr}*/
	;


smallexpr
	:	NAME 			            { $$ = new Object[]{CodeType.NAME, findVar($1)};} 						/*{CodeType.NAME, nameLoc}*/
	|	NAME '(' args ')'			{ $$ = new Object[]{CodeType.CALL, $1, ((Vector<Object>)($3)).toArray()};} 				/*{CodeType.CALL, name, args}*/
	|	op smallexpr				{ $$ = new Object[]{CodeType.OP, $1, $2};} 							/*{CodeType.OP, OPsymbol, expr}*/
	|	LITERAL				        { $$ = new Object[]{CodeType.LITERAL, $1};} 							/*{CodeType.LITERAL, literal}*/
	|	'(' expr ')'				{ $$ = new Object[]{CodeType.PRIOR, $2};} 					/*{CodeType.PRIOR, expr}*/
	|	ifexpr				        { $$ = $1;} 							 								/*{CodeType.IF,cond,then,else}*/
	|	WHILE '(' expr ')' body 	{$$ = new Object[]{CodeType.WHILE, $3, $5};}					/*{CodeType.WHILE, cond, body}*/
	;

op
	: OPERATOR 	{$$ = $1;}
	;

fname
    : NAME   {$$ = $1;}
    ;

ifexpr
	:	IF '(' expr ')' body elsebody 	{$$ = new Object[]{CodeType.IF, $3, $5, $6};}
	;

elsebody
	:  /*empty*/ 	{$$ = null;} /*Should change this to an object of null, empty object or something else than null*/
	|  ELSIF '(' expr ')' body elsebody  {$$ = new Object[]{CodeType.IF, $3, $5, $6};}
	|  ELSE body 	{$$ = new Object[]{CodeType.ELSE, $2};}
	;

body
	:	'{' bodyexprs '}'	{$$ = ((Vector<Object>)($2)).toArray();} 			/*{expr0, expr1, ..., exprN}*/
	;

bodyexprs
	:	bodyexprs expr ';'		{ ((Vector<Object>)($1)).add($2); $$=$1; }
	|	expr ';'				{ $$=new Vector<Object>(); ((Vector<Object>)($$)).add($1); }
	;

%%
	
    // Eftirfarandi fastar standa fyrir allar þær
    // mögulegu gerðir af segðum sem milliþula
    // (intermediate code) getur innihaldið.
    enum CodeType {
        NAME, ASSIGN, CALL, RETURN, OP, LITERAL, IF, WHILE, ELSE, PRIOR
    };


	private int varCount;
	private HashMap<String,Integer> varTable;
    static private String name;
    private static NanoMorphoLexer lexer;
    private static String lexeme;
    private static PrintWriter writer;
    // Inni í hverri fallsskilgreiningu inniheldur vars nöfnin
    // á viðföngunum í fallið (þ.e. leppunum eða breytunöfnunum
    // sem standa fyrir viðföngin), í sætum 1 og aftar.  Sæti
    // 0 inniheldur nafn fallsins sem verið er að skilgreina.
    private static String[] vars;

	private void addVar( String name )
	{
		if( varTable.get(name) != null )
			yyerror("Variable already exists");
		varTable.put(name,varCount++);
	}

	private int findVar( String name )
	{
		Integer res = varTable.get(name);
		if( res == null )
			yyerror("Variable does not exist");
		return res;
	}

	int last_token_read,line,column;

	private int yylex()
	{
		int yyl_return = -1;
		try
		{
			yylval = null;
			last_token_read = yyl_return = lexer.yylex();
			line = lexer.getLine()+1;
			column = lexer.getColumn()+1;
			if( yylval==null )
				yylval = new NanoMorphoParserVal(NanoMorphoParser.yyname[yyl_return]);
			//System.out.println("Token: "+MorphoParser.yyname[yyl_return]+" Lexeme: "+yylval.sval);
		}
		catch (IOException e)
		{
			System.err.println("IO error: "+e);
		}
		return yyl_return;
	}

	public void yyerror( String error )
	{
		System.out.println("Error:  "+error);
		System.out.println("Token:  "+NanoMorphoParser.yyname[last_token_read]);
		System.out.println("Line:   "+line);
		System.out.println("Column: "+column);
		System.exit(1);
	}

	public NanoMorphoParser( Reader r )
	{
		lexer = new NanoMorphoLexer(r,this);
	}

	public static void main( String args[] )
	  	throws IOException
	{
		NanoMorphoParser yyparser = new NanoMorphoParser(new FileReader(args[0]));
		name = args[0];//.substring(0,args[0].lastIndexOf('.'));
		yyparser.yyparse();
	}

	// Use: emit(line);
    // Pre:  line er lína í lokaþulu.
    // Post:  Búið er að skrifa línuna á aðalúttak.
    private static void emit( String line ) {
        System.out.println(line);
        //writer.println(line);
    }

   private static void generateProgram(String name, Object[] p) {
        // p = {function0, function1, ..., functionN}
        emit("\""+name+".mexe\" = main in");
        emit("!{{");
        for( int i=0; i!=p.length; i++ ) generateFunction((Object[])p[i]);
        emit("}}*BASIS;");
    }

    private static void generateFunction(Object[] f) {
        // f = {fname, argcount, varcount, expr0, expr1, ..., exprN}
        String fname = (String)f[0];
        int argcount = (Integer)f[1];
        int varcount = (Integer)f[2];
        emit("#\""+fname+"[f"+argcount+"]\" = ");
        emit("[");
        // Fetch the values from the var declarations and put them on the stack:
        // If there are n arguments to the function, the declarations must be
        // n+1, n+2, ... , n+numVarDeclarations
        for(int i=argcount; i<argcount+varcount; i++) {
            emit("(MakeVal null)");
            emit("(Push)");
        }
        for(int i=3; i!=f.length; i++) generateExpr((Object[])f[i]);
        emit("(Return)");
        emit("];");
    }


    static int nextLab = 1;

    // Notkun: int i = newLab();
    // Eftir:  i er jákvæð heiltala sem ekki hefur áður
    //         verið skilað úr þessu falli.  Tilgangurinn
    //         er að búa til nýtt merki (label), sem er
    //         ekki það sama og neitt annað merki.
    static int newLab() {
        return nextLab++;
    }

    private static void generateExpr(Object[] e) {
        // e = {expr} eða e = {expr, op, expr, op, expr, ... , op, expr}
        // generateSmallExpr()
        // (Push)
        // generateSmallExpr();
        // (Call #opf[2] 2)
        // (Push) // Setja gildið í accumulator
        // generateSmallExpr();
        // (Call #opf[2] 2)
        // ...
        // (Call #opf[2] 2) 
        generateSmallExpr((Object[])e[0]); // Alltaf fyrir fyrsta expr
        if(e.length == 1) return;
        for(int i=1; i!=e.length-1; i++) {
            // Put our last expr on the stack
            emit("(Push)");
            String op = e[i].toString();
            generateSmallExpr((Object[])e[i+1]);
            emit("(Call #\""+op+"[f"+2+"]\" "+2+")");
        }
    }

    // Needs to handle: NAME, ASSIGN, CALL, RETURN, OP, LITERAL, IF, WHILE
    private static void generateSmallExpr(Object[] e) {
        // e = {CodeType, ...}
        switch( (CodeType)e[0] ) {
            case NAME:
                // e = {NAME,nameLoc}
                /* CODE:
                    (Fetch nameLoc)
                 */
                emit("(Fetch "+e[1]+")");
                return;
            case LITERAL:
                // e = {LITERAL,literal}
                /* CODE:
                    (MakeVal literal)
                 */
                emit("(MakeVal "+(String)e[1]+")");
                return;
            case ASSIGN:
                // e = {ASSIGN, argloc, expr()}
                /* CODE:
                    Code(expr()) -> stored in ac
                    (Store argloc)
                 */
                generateExpr((Object[])e[2]);
                emit("(Store "+e[1]+")");
                return;
            case CALL:
                // e = {CALL,name,args}
                /* CODE:
                    Code(args[0]) -> Stored in ac
                    (Push)  -> Pushed to stack
                    Code(args[1]) -> Stored in ac
                    (Push)-> Pushed to stack
                    .
                    .
                    .
                    Code(args[args.length-1])
                    (Push)
                    (Call #"name[fargs.length]" args.length)
                 */
                Object[] args = (Object[])e[2];
                int i;
                for( i=0 ; i!=args.length ; i++ )
                    if( i==0 )
                        generateExpr((Object[])args[i]);
                    else
                        generateExprP((Object[])args[i]);
                emit("(Call #\""+e[1]+"[f"+i+"]\" "+i+")");
                return;
            case RETURN:
                // e = {RETURN, expr}
                /* CODE
                Code(expr())
                (Return)
                 */ 
                generateExpr((Object[])e[1]);
                emit("(Return)");
                return;
            case OP:
                // e = {OP, OPsymbol, expr}
                /* CODE
                Code(expr()) -> ac
                (Call "OPsymbol[f1]" 1)
                 */
                generateSmallExpr((Object[])e[2]);
                emit("(Call \""+e[1]+"[f1]\" "+1);
                return;
            case PRIOR:
                // e = {PRIOR, expr}
                generateExpr((Object[])e[1]);
                return;
            case IF:
                // e = {IF,cond,then,else}
                // Viljum að then expr sé annað if else expr ef um elsif er að ræða
                /* CODE
                        Code(cond)
                        (GoFalse _L1)
                        Code(then)
                        (Go _L2)
                   _L1:
                        Code(else)
                   _L2:

                 */
                int labElse = newLab();
                int labEnd = newLab();
                generateJump((Object[])e[1],0,labElse); // check condition
                generateBody((Object[])e[2]); // 'then' expr if condition was true (pos 0)
                emit("(Go _"+labEnd+")");
                emit("_"+labElse+":");
                generateSmallExpr((Object[])e[3]); // 'else' expr if condition was false.note this wasn't small expr!
                emit("_"+labEnd+":");
                return;
            case ELSE:
                generateBody((Object[])e[1]);
                return;
            case WHILE:
                // e = {WHILE, cond, body}
                /* CODE:
                    _L1:
                        Code(cond)
                        (GoFalse _L2)
                        Code(body)
                        (Go _L1)
                    _L2:
                 */
                int labStart = newLab();
                int labQuit = newLab();
                emit("_"+labStart+":"); // start of while loop
                generateJump((Object[])e[1], 0, labQuit);
                generateBody((Object[])e[2]);
                emit("(Go _"+labStart+")");
                emit("_"+labQuit+":");
                return;
        }
    }

    private static void generateBody(Object[] e) {
        // e = {expr0, expr1, ..., exprN}
        for(int i=0; i<e.length; i++) {
            generateExpr((Object[])e[i]);
        }
    }


    // Notkun: generateJump(e,labTrue,labTrue);
    // Fyrir:  e er milliþula fyrir segð, labTrue og
    //         labFalse eru heiltölur sem standa fyrir
    //         merki eða eru núll.
    // Eftir:  Búið er að skrifa lokaþulu fyrir segðina
    //         á aðalúttak.  Lokaþulan veldur stökki til
    //         merkisins labTrue ef segðina skilar sönnu,
    //         annars stökki til labFalse.  Ef annað merkið
    //         er núll þá er það jafngilt merki sem er rétt
    //         fyrir aftan þulu segðarinnar.
    private static void generateJump( Object[] e, int labTrue, int labFalse ) {
        generateExpr(e);
        if( labTrue!=0 ) emit("(GoTrue _"+labTrue+")");
        if( labFalse!=0 ) emit("(GoFalse _"+labFalse+")");
    }

    // Notkun: generateJumpP(e,labTrue,labFalse);
    // Fyrir:  e er milliþula fyrir segð, labTrue og
    //         labFalse eru heiltölur sem standa fyrir
    //         merki eða eru núll.
    // Eftir:  Þetta kall býr til lokaþulu sem er jafngild
    //         þulunni sem köllin
    //            emit("(Push)");
    //            generateJump(e,labTrue,labFalse);
    //         framleiða.  Þulan er samt ekki endilega sú
    //         sama og þessi köll framleiða því tilgangurinn
    //         er að geta framleitt betri þulu.
    private static void generateJumpP( Object[] e, int labTrue, int labFalse ) {
        switch( (CodeType)e[0] )
        {
            case LITERAL:
                String literal = (String)e[1];
                emit("(Push)");
                if( literal.equals("false") || literal.equals("null") )
                {
                    if( labFalse!=0 ) emit("(Go _"+labFalse+")");
                    return;
                }
                if( labTrue!=0 ) emit("(Go _"+labTrue+")");
                return;
            default:
                generateExprP(e);
                if( labTrue!=0 ) emit("(GoTrue _"+labTrue+")");
                if( labFalse!=0 ) emit("(GoFalse _"+labFalse+")");
        }
    }

    // Notkun: generateExprP(e);
    // Fyrir:  e er milliþula fyrir segð.
    // Eftir:  Þetta kall býr til lokaþulu sem er jafngild
    //         þulunni sem köllin
    //            emit("(Push)");
    //            generateExpr(e);
    //         framleiða.  Þulan er samt ekki endilega sú
    //         sama og þessi köll framleiða því tilgangurinn
    //         er að geta framleitt betri þulu.
    private static void generateExprP( Object[] e ) {
        switch( (CodeType)e[0] )
        {
            case NAME:
                // e = {NAME,name}
                emit("(FetchP "+e[1]+")");
                return;
            case LITERAL:
                // e = {LITERAL,literal}
                emit("(MakeValP "+(String)e[1]+")");
                return;
            case IF:
                // e = {IF,cond,then,else}
                int labElse = newLab();
                int labEnd = newLab();
                generateJumpP((Object[])e[1],0,labElse);
                generateExpr((Object[])e[2]);
                emit("(Go _"+labEnd+")");
                emit("_"+labElse+":");
                generateExpr((Object[])e[3]);
                emit("_"+labEnd+":");
                return;
            case CALL:
                // e = {CALL,name,args}
                Object[] args = (Object[])e[2];
                int i;
                for( i=0 ; i!=args.length ; i++ ) generateExprP((Object[])args[i]);
                if( i==0 ) emit("(Push)");
                emit("(Call #\""+e[1]+"[f"+i+"]\" "+i+")");
                return;
        }
    }

